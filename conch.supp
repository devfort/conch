{
   <libpq leaks like a sieve>
   Memcheck:Leak
   ...
   fun:PQsetdbLogin
}
{
   <libpq leaks like a sieve>
   Memcheck:Leak
   ...
   fun:connectDB
}
{
   <libpq leaks like a sieve>
   Memcheck:Leak
   ...
   fun:connectDBStart
}
{
   <libpq leaks like a sieve>
   Memcheck:Leak
   ...
   fun:getpwuid_r
   obj:*/libpq.*
   ...
}


{
   <libpq makes openssl leaks like a sieve>
   Memcheck:Leak
   match-leak-kinds: reachable
   fun:malloc
   ...
   obj:*/libcrypto.*
   ...
   obj:*/libpq.*
   ...
}

{
   <libpq makes openssl leaks like a sieve>
   Memcheck:Leak
   match-leak-kinds: indirect
   fun:malloc
   ...
   obj:*/libcrypto.*
   ...
   obj:*/libpq.*
   ...
}

{
   Ignore libssl ERR strings
   Memcheck:Leak
   ...
   fun:ERR_load_ERR_strings
}

{
   ignore_value8_error_from_libssl_sadface
   Memcheck:Value8
   ...
   fun:ssl3_send_client_key_exchange
   fun:ssl3_connect
   ...
   obj:*/libpq.*
   ...
}

{
   libpq doesn't make libssl happy
   Memcheck:Cond
   ...
   fun:ssl3_send_client_key_exchange
   fun:ssl3_connect
   ...
   obj:*/libpq.*
   ...
}

{
   ASN1_OBJECT leaves things unreachable
   Memcheck:Leak
   match-leak-kinds: indirect
   fun:malloc
   ...
   obj:*/libcrypto.*
   ...
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   match-leak-kinds: reachable
   fun:malloc
   fun:strdup
   ...
   fun:si_module_static_search
}

{
   ignore_anything_from_objc
   Memcheck:Leak
   ...
   obj:/usr/lib/libobjc.A.dylib
   ...
}

{
   ignore dyld
   Memcheck:Leak
   ...
   obj:/usr/lib/dyld
}

{
   imlib Loaders can never be freed
   Memcheck:Leak
   ...
   fun:__imlib_LoadImage
   ...
}

{
   imlib initial context can never be freed
   Memcheck:Leak
   fun:malloc
   fun:imlib_context_push
}

{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:setlocale
}
{
   <insert_a_suppression_name_here>
   Memcheck:Leak
   fun:malloc
   fun:currentlocale
}

{
   Something in system info ...
   Memcheck:Leak
   match-leak-kinds: reachable
   fun:*alloc
   ...
   fun:dispatch_once_f
}

{
   <libcheck when run in forking mode is not safe>
   Memcheck:Leak
   match-leak-kinds: reachable
   ...
   obj:*/libcheck.*
   fun:check_list_*
}

{
   <libcheck when run in forking mode is not safe>
   Memcheck:Leak
   match-leak-kinds: reachable
   fun:malloc
   fun:emalloc
   fun:srunner_create
}

{
   <libcheck when run in forking mode is not safe>
   Memcheck:Leak
   match-leak-kinds: reachable
   fun:malloc
   fun:emalloc
   fun:suite_create
}
{
   <libcheck when run in forking mode is not safe>
   Memcheck:Leak
   match-leak-kinds: reachable
   fun:malloc
   fun:emalloc
   fun:srunner_register_lfun
}
{
   <libcheck when run in forking mode is not safe>
   Memcheck:Leak
   match-leak-kinds: reachable
   fun:malloc
   fun:emalloc
   fun:_tcase_add_test
}
{
   <libcheck when run in forking mode is not safe>
   Memcheck:Leak
   match-leak-kinds: reachable
   fun:malloc
   fun:emalloc
   fun:tcase_create
}
{
   <libcheck when run in forking mode is not safe>
   Memcheck:Leak
   fun:malloc
   ...
   fun:fprintf
   fun:srunner_send_evt
}
{
   <libcheck when run in forking mode is not safe>
   Memcheck:Leak
   fun:malloc
   ...
   fun:srunner_run_setup
}


{
   <libcheck when run in forking mode is not safe>
   Memcheck:Leak
   fun:malloc
   fun:strdup
   fun:srunner_run
}
{
   <libcheck when run in forking mode is not safe>
   Memcheck:Leak
   fun:malloc
   ...
   fun:receive_test_result
   fun:srunner_run
}
